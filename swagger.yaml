openapi: 3.0.0
info:
  title: API Padrão
  description: |
    API RESTful desenvolvida com NestJS, utilizando Prisma como ORM e PostgreSQL como banco de dados.
    
    ## Recursos
    - Autenticação JWT com perfis e permissões
    - Gerenciamento de Usuários com múltiplos perfis
    - Gerenciamento de Perfis com código único e descrição
    - Gerenciamento de Permissões com código único e descrição
    - Paginação em todos os endpoints de listagem
    - Documentação completa com Swagger/OpenAPI
    
    ## Configurações
    - Porta: 3000
    - Versão: 1.0.0
    - Ambiente: development
    
    ## Autenticação
    A API utiliza autenticação JWT (Bearer Token) para proteger os endpoints.
    Para obter um token, utilize o endpoint /auth/login.
  version: 1.0.0
  contact:
    name: API Padrão Team
    url: https://github.com/b3ll3o/api-padrao
    email: contato@email.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /usuarios:
    post:
      operationId: UsuariosController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUsuarioDto'
      responses:
        '201':
          description: Usuário criado com sucesso.
        '400':
          description: Dados inválidos.
        '409':
          description: Email já cadastrado.
      summary: Cria um novo usuário
      tags:
        - Usuários
  /usuarios/{id}:
    get:
      description: |
        Retorna os dados do usuário. Requer autenticação e só permite que o usuário acesse seus próprios dados.
      operationId: UsuariosController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: |
            Retorna o usuário com o ID especificado, excluindo dados sensíveis como senha e perfis.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '401':
          description: Não autorizado - Token JWT ausente ou inválido.
        '403':
          description: |
            Acesso negado - O usuário autenticado não tem permissão para acessar os dados de outro usuário.
        '404':
          description: Usuário não encontrado - O ID especificado não existe no sistema.
      summary: Buscar um usuário por ID
      tags:
        - Usuários
  /auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUsuarioDto'
      responses:
        '201':
          description: Autenticação bem-sucedida.
        '401':
          description: Credenciais inválidas.
      summary: Autentica um usuário e retorna um JWT
      tags:
        - Autenticação
  /permissoes:
    post:
      operationId: PermissoesController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePermissaoDto'
      responses:
        '201':
          description: A permissão foi criada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permissao'
        '400':
          description: Requisição inválida.
      security:
        - JWT-auth: []
      summary: Criar uma nova permissão
      tags:
        - Permissoes
    get:
      operationId: PermissoesController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Número da página (começa em 1)
          schema:
            minimum: 1
            default: 1
            example: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Número de itens por página
          schema:
            minimum: 1
            default: 10
            example: 10
            type: number
      responses:
        '200':
          description: Retorna todas as permissões.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDto'
      security:
        - JWT-auth: []
      summary: Listar todas as permissões
      tags:
        - Permissoes
  /permissoes/{id}:
    get:
      operationId: PermissoesController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Retorna a permissão com o ID especificado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permissao'
        '404':
          description: Permissão não encontrada.
      security:
        - JWT-auth: []
      summary: Buscar uma permissão por ID
      tags:
        - Permissoes
    patch:
      operationId: PermissoesController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePermissaoDto'
      responses:
        '200':
          description: A permissão foi atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permissao'
        '400':
          description: Requisição inválida.
        '404':
          description: Permissão não encontrada.
      security:
        - JWT-auth: []
      summary: Atualizar uma permissão existente
      tags:
        - Permissoes
    delete:
      operationId: PermissoesController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: A permissão foi removida com sucesso.
        '404':
          description: Permissão não encontrada.
      security:
        - JWT-auth: []
      summary: Remover uma permissão por ID
      tags:
        - Permissoes
  /permissoes/nome/{nome}:
    get:
      operationId: PermissoesController_findByName
      parameters:
        - name: nome
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: Número da página (começa em 1)
          schema:
            minimum: 1
            default: 1
            example: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Número de itens por página
          schema:
            minimum: 1
            default: 10
            example: 10
            type: number
      responses:
        '200':
          description: Retorna uma lista de permissões que contêm a string no nome.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDto'
      security:
        - JWT-auth: []
      summary: Buscar permissões por nome contendo a string
      tags:
        - Permissoes
  /perfis:
    post:
      operationId: PerfisController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePerfilDto'
      responses:
        '201':
          description: O perfil foi criado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Perfil'
        '400':
          description: Requisição inválida.
      security:
        - JWT-auth: []
      summary: Criar um novo perfil
      tags:
        - Perfis
    get:
      operationId: PerfisController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Número da página (começa em 1)
          schema:
            minimum: 1
            default: 1
            example: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Número de itens por página
          schema:
            minimum: 1
            default: 10
            example: 10
            type: number
      responses:
        '200':
          description: Retorna todos os perfis.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDto'
      security:
        - JWT-auth: []
      summary: Listar todos os perfis
      tags:
        - Perfis
  /perfis/{id}:
    get:
      operationId: PerfisController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Retorna o perfil com o ID especificado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Perfil'
        '404':
          description: Perfil não encontrado.
      security:
        - JWT-auth: []
      summary: Buscar um perfil por ID
      tags:
        - Perfis
    patch:
      operationId: PerfisController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePerfilDto'
      responses:
        '200':
          description: O perfil foi atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Perfil'
        '400':
          description: Requisição inválida.
        '404':
          description: Perfil não encontrado.
      security:
        - JWT-auth: []
      summary: Atualizar um perfil existente
      tags:
        - Perfis
    delete:
      operationId: PerfisController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: O perfil foi removido com sucesso.
        '404':
          description: Perfil não encontrado.
      security:
        - JWT-auth: []
      summary: Remover um perfil por ID
      tags:
        - Perfis
  /perfis/nome/{nome}:
    get:
      operationId: PerfisController_findByNome
      parameters:
        - name: nome
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          description: Número da página (começa em 1)
          schema:
            minimum: 1
            default: 1
            example: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Número de itens por página
          schema:
            minimum: 1
            default: 10
            example: 10
            type: number
      responses:
        '200':
          description: Retorna uma lista de perfis que contêm a string no nome.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDto'
      security:
        - JWT-auth: []
      summary: Buscar perfis por nome contendo a string
      tags:
        - Perfis
servers:
  - url: http://localhost:3000
    description: Local
  - url: https://api-padrao-dev.example.com
    description: Development
  - url: https://api-padrao.example.com
    description: Production
components:
  securitySchemes:
    JWT-auth:
      scheme: bearer
      bearerFormat: JWT
      type: http
      description: Enter JWT token
  schemas:
    CreateUsuarioDto:
      type: object
      properties:
        email:
          type: string
          example: test@example.com
          description: Endereço de e-mail do usuário
        senha:
          type: string
          example: Password123!
          description: Senha do usuário
        perfisIds:
          description: IDs dos perfis associados ao usuário
          type: array
          items:
            type: number
      required:
        - email
        - senha
    Permissao:
      type: object
      properties:
        id:
          type: number
          description: ID da permissão
          example: 1
        nome:
          type: string
          description: Nome da permissão
          example: read:users
        codigo:
          type: string
          description: Código da permissão
          example: READ_USERS
        descricao:
          type: string
          description: Descrição da permissão
          example: Permite ler usuários
      required:
        - id
        - nome
        - codigo
        - descricao
    Perfil:
      type: object
      properties:
        id:
          type: number
          description: ID do perfil
          example: 1
        nome:
          type: string
          description: Nome do perfil
          example: Administrador
        codigo:
          type: string
          description: Código do perfil
          example: ADMIN
        descricao:
          type: string
          description: Descrição do perfil
          example: Perfil com acesso total ao sistema
        permissoes:
          description: Permissões associadas ao perfil
          type: array
          items:
            $ref: '#/components/schemas/Permissao'
      required:
        - id
        - nome
        - codigo
        - descricao
    Usuario:
      type: object
      properties:
        id:
          type: number
          description: ID único do usuário
          example: 1
        email:
          type: string
          description: Email do usuário
          example: usuario@exemplo.com
        senha:
          type: string
          description: Senha do usuário (não retornada nas consultas)
          example: senha123
          writeOnly: true
        createdAt:
          format: date-time
          type: string
          description: Data de criação do registro
          example: 2025-09-08T10:00:00Z
        updatedAt:
          format: date-time
          type: string
          description: Data da última atualização do registro
          example: 2025-09-08T10:00:00Z
        perfis:
          description: Lista de perfis associados ao usuário
          type: array
          items:
            $ref: '#/components/schemas/Perfil'
      required:
        - id
        - email
        - createdAt
        - updatedAt
    LoginUsuarioDto:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
          description: Endereço de e-mail do usuário
        senha:
          type: string
          example: Password123!
          description: Senha do usuário
      required:
        - email
        - senha
    CreatePermissaoDto:
      type: object
      properties:
        nome:
          type: string
          description: O nome da permissão
          example: read:users
        codigo:
          type: string
          description: O código da permissão
          example: READ_USERS
        descricao:
          type: string
          description: A descrição da permissão
          example: Permissão para ler usuários
      required:
        - nome
        - codigo
        - descricao
    PaginatedResponseDto:
      type: object
      properties:
        data:
          description: Lista de itens na página atual
          type: array
          items:
            type: object
        total:
          type: number
          description: Número total de itens disponíveis
          example: 100
        page:
          type: number
          description: Página atual
          example: 1
        limit:
          type: number
          description: Número de itens por página
          example: 10
        totalPages:
          type: number
          description: Número total de páginas
          example: 10
      required:
        - data
        - total
        - page
        - limit
        - totalPages
    UpdatePermissaoDto:
      type: object
      properties: {}
    CreatePerfilDto:
      type: object
      properties:
        nome:
          type: string
          description: O nome do perfil
          example: Administrador
        codigo:
          type: string
          description: O código do perfil
          example: ADMIN
        descricao:
          type: string
          description: A descrição do perfil
          example: Perfil de administrador do sistema
        permissoesIds:
          description: Array de IDs de permissões
          example:
            - 1
            - 2
            - 3
          type: array
          items:
            type: string
      required:
        - nome
        - codigo
        - descricao
    UpdatePerfilDto:
      type: object
      properties: {}
tags:
  - name: Autenticação
    description: Endpoints relacionados à autenticação
  - name: Usuários
    description: Gerenciamento de usuários do sistema
  - name: Perfis
    description: Gerenciamento de perfis de acesso
  - name: Permissões
    description: Gerenciamento de permissões do sistema